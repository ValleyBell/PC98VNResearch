System-98 Scene Format
----------------------
The first 100h bytes appear to be reserved for comments and are unencrypted.
The actual script data begins at offset 100h and is encrypted with a simple "XOR 01h" algorithm.

[loop]
2 bytes - command ID
	0000h..008Eh are valid
	008Fh..00FFh will crash the engine
	0100h..FFFFh will return to DOS (executes command 0000h)
? bytes - parameters
[loop end]

Commands
--------
00 DOSEXIT - exit to DOS, return code 0
	no parameters
01 - [v1.xx] text box related
	2 bytes - text box ID (00h..0Fh)
	2 bytes - ??
	2 bytes - ??
	2 bytes - [HB-pad] ??
	2 bytes - file offset of image file name to load
	-> 0Ah bytes total
01 - [v3.10] undefined
02 IMGLOAD - load image
	2 bytes - destination column (X/8)
	2 bytes - destination row (Y)
	2 bytes - [HB-pad] update palette (01..FF)
	2 bytes - [HB-pad] GDC plane (write vv to I/O register 0A6h for vv = 00/01, ignored for others)
	2 bytes - file offset of image file name to load
	2 bytes - [HB-pad] draw mode (0 = opaque, 1 = transparent)
	-> 0Ch bytes total
03 TBOPEN - open text box
	2 bytes - text box ID (00h..0Fh)
		Text boxes 00h..07h have no borders and simple opaque backgrounds.
		Text boxes 08h..0Fh can have transparent borders and backgrounds.
	2 bytes - start column (X/16)
	2 bytes - start row (Y/16)
		Note: The first text letter is drawn at position (column+1, row+1) to leave space for the border.
	2 bytes - width (sizeX/16)
	2 bytes - height (sizeY/16)
	2 bytes - text box style (0 = transparent, 1+ = border/background type)
	-> 0Ch bytes total
04 TBCLOSE - close text box
	2 bytes - text box ID (00h..0Fh)
05 TBCLEAR - clear text box
	2 bytes - text box ID (00h..0Fh)
06 PALAPL - apply palette
	no parameters
07 PALBW - palette fade: black/white
	2 bytes - direction: 0 = fade black -> white, 1 = fade white -> black
	2 bytes - frames per step
	The current palette is set to black or white at the beginning.
	In each step, all colours are incremented/decremented by 1 until the target colour (black/white) is reached.
08 PALFADE - palette fade out/in
	2 bytes - direction: 0 = fade black -> white, 1 = fade white -> black
	2 bytes - frames per step
	In each step, all colours are incremented/decremented by 1 until the target colour (black/white) is reached.
09 PALLCKT - toggle Palette Colour Lock Mask
	2 bytes - [HB-pad] colour ID to lock/unlock (can be 00h to 0Fh)
0A JP - jump to offset
	2 bytes - destination file offset to continue execution at
0B CMPR - compare registers
	2 bytes - register ID of reg1
	2 bytes - register ID of reg2
	reg1 == reg2 -> byte_1D1D5 = 0
	reg1 < reg2 -> byte_1D1D5 = 1
	reg1 > reg2 -> byte_1D1D5 = 2
0C CMPI - compare register and value
	2 bytes - register ID of "reg"
	2 bytes - value val
	reg == val -> byte_1D1D5 = 0
	reg < val -> byte_1D1D5 = 1
	reg > val -> byte_1D1D5 = 2
0D JEQ - conditional jump: equal (checks byte_1D1D5 == 0)
	2 bytes - destination file offset to continue execution at
0E JLT - conditional jump: less than (checks byte_1D1D5 == 1)
	2 bytes - destination file offset to continue execution at
0F JGT - conditional jump: greater than (checks byte_1D1D5 == 2)
	2 bytes - destination file offset to continue execution at
10 JGE - conditional jump: greater or equal (checks byte_1D1D5 != 1)
	2 bytes - destination file offset to continue execution at
11 JLE - conditional jump: less or equal (checks byte_1D1D5 != 2)
	2 bytes - destination file offset to continue execution at
12 JNE - conditional jump: not equal (checks byte_1D1D5 != 0)
	2 bytes - destination file offset to continue execution at
13 JTBL - execute jump table
	2 bytes - register ID
	There is a table of absolute file offsets (2 bytes each) following the command.
	It takes the Nth entry (based on the content from the register) of the table and jumps there.
	dest. offset = *([table offset] + [register content] * 2)
14 PALCSET - set palette colour
	2 bytes - register ID: palette colour ID (00h..0Fh)
	2 bytes - register ID: red component (00h..0Fh)
	2 bytes - register ID: green component (00h..0Fh)
	2 bytes - register ID: blue component (00h..0Fh)
	-> 08h bytes total
15 PRINT - show text in text box
	2 bytes - [HB-pad] text box ID
	2 bytes - file offset of text to be printed
16 PRINTXY - show text at screen position
	2 bytes - X position
	2 bytes - Y position
	2 bytes - file offset of text to be printed
17 - undefined
18 MOVI - set register = value
	2 bytes - register ID
	regID == 000h..3FFh
		2 bytes - value
	regID >= 400h
		4 bytes - value
19 MOVR - set register = other register
	2 bytes - destination register ID
	2 bytes - source register ID
	Note: This works with 2-byte (ID 000h..3FFh) and 4-byte (ID 400h+) registers. However, the source and destination MUST be from the same type.
1A BGMPLAY - play music
	2 bytes - file offset of file name
1B BGMFADE - fade music out
	no parameters
1C BGMSTOP - stop music
	no parameters
1D BGMMODE - get music mode
	2 bytes - register ID where the music mode will be stored in
1E WAITKEY - wait for key press
	2 bytes - register ID where the key code of the pressed key is written to
1F LDSCENE - load new scene file
	2 bytes - file offset of file name
	Note: This terminates execution of the current scene.
20 GV02 - fill GVRAM
	no parameters
	writes a pattern of "00 02" to 64 KB from offset 0A8000 on (GVRAM Plane 0)
21 WAIT - delay script execution by N frames
	2 bytes - register ID that contains number of frames to wait
22 CHRDLY - set character print delay
	2 bytes - register ID
	Setting the character print delay causes the game to wait for N frames between drawing each character.
23 - undefined
24 ADDI - add value to register
	2 bytes - register ID
	regID == 000h..3FFh
		2 bytes - value to be added
	regID >= 400h
		4 bytes - value to be added
25 SUBI - subtract value from register
	2 bytes - register ID
	regID == 000h..3FFh
		2 bytes - value to be subtracted
	regID >= 400h
		4 bytes - value to be subtracted
26 TXCLR1 - text buffer clear 1
	2 bytes - destination column (X/32)
	2 bytes - destination row (Y/16)
	2 bytes - columns to fill (width/32)
	2 bytes - rows to fill (height/16)
	2 bytes - [HB-pad] text flags (00 = mode "E1 20", 01..FF = mode "E1 87")
	-> 0Ah bytes total
27 ADDR - add source to destination with differing register types
	2 bytes - destination register ID
	2 bytes - source register ID
	dst [long], src [long]: add src to dst
	dst [short], src [short]: add src to dst
	dst [short], src [long]: add src to dst while using 2-byte addressing src's register (short ID 400h = long 400h low word, 401 = long 400h high word, etc.)
	dst [long], src [short]: add src (with high word set to 0) to dst
28 SUBR - subtract source from destination with differing register types
	2 bytes - destination register ID
	2 bytes - source register ID
	dst [long], src [long]: add src to dst
	dst [short], src [short]: add src to dst
	dst [short], src [long]: add src to dst while using 2-byte addressing src's register (short ID 400h = long 400h low word, 401 = long 400h high word, etc.)
	dst [long], src [short]: add src (with high word set to 0) to dst
29 XYREAD - read value from XY buffer to register
	2 bytes - destination register ID
	2 bytes - register ID with X position
	2 bytes - register ID with Y position
2A XYWRT - write value from register into XY buffer
	2 bytes - source register ID
	2 bytes - register ID with X position
	2 bytes - register ID with Y position
2B - [v1.xx] save full register buffer to file (2048 bytes)
	2 bytes - file offset of file name
2B - [v3.10] undefined
2C - [v1.xx] load register buffer from file (2048 bytes)
	2 bytes - file offset of file name
2C - [v3.10] undefined
2D REGCLR - clear registers
	2 bytes - register ID 1
	2 bytes - register ID 2
	Sets all registers from reg1 to reg2 (inclusive) to 0.
2E - undefined
2F BLIT1I - image copy
	2 bytes - [HB-pad] source GDC plane (0/1/2) -> byte_1D0F6
	2 bytes - source column (X/8) -> word_1D0F8
	2 bytes - source row (Y) -> word_1D0FA
	2 bytes - columns to copy (width/8) -> word_1D0FE
	2 bytes - rows to copy (height) -> word_1D100
	
	2 bytes - [HB-pad] destination GDC plane -> byte_1D110
	2 bytes - destination column (X/8) -> word_1D10A
	2 bytes - destination row (Y) -> word_1D10C
	-> 0Ah + 06h = 10h bytes total
30 - undefined
31 - undefined
32 PRINTR - print register as text
	2 bytes - [HB-pad] text box ID
	2 bytes - ID of register to be printed
33 GPDGET - set graphics plane to display
	2 bytes - register ID
	Reads value from the register and writes the lowest bit to I/O port 0A4h.
	Stores the written value in a separate register.
34 GPDSET - get graphics plane to display
	2 bytes - register ID
	Puts the last value that was written to I/O port 0A4h into the register.
35 TXFILL - text buffer fill
	2 bytes - destination column (X/32)
	2 bytes - destination row (Y/16)
	2 bytes - columns to fill (width/32)
	2 bytes - rows to fill (height/16)
	2 bytes - [HB-pad] text flags (00 = mode "E1 20", 01..FF = mode "01 87")
	2 bytes - Shift-JIS character
	-> 0Ch bytes total
36 GFX36 - ?? (some GFX clear)
	no parameters
37 XYFLOAD - load XY buffer from file
	2 bytes - file offset of file name
38 ANDR - "AND" source with destination register
	2 bytes - destination register ID
	2 bytes - source register ID
	Note: assumes 2-byte addressing mode.
39 ORR - "OR" source with destination register
	2 bytes - destination register ID
	2 bytes - source register ID
	Note: assumes 2-byte addressing mode.
3A BLIT1R - image copy
	2 bytes - register ID -> byte_1D0F6
	2 bytes - register ID for source column (X/8) -> word_1D0F8
	2 bytes - register ID for source row (Y) -> word_1D0FA
	2 bytes - register ID for columns to copy (width/8) -> word_1D0FE
	2 bytes - register ID for rows to copy (height) -> word_1D100
	
	2 bytes - register ID -> byte_1D110
	2 bytes - register ID for destination column (X/8) -> word_1D10A
	2 bytes - register ID for destination row (Y) -> word_1D10C
	-> 0Ah + 06h = 10h bytes total
	Note: Same as 2F, except that parameters are read from registers.
3B BLIT1RL - image copy
	2 bytes - register ID -> byte_1D0F6
	2 bytes - register ID for source column (X/8) -> word_1D0F8
	2 bytes - register ID for source row (Y) -> word_1D0FA
	2 bytes - register ID for long columns to copy (width/32) -> multiplied with 4, then written to word_1D0FE
	2 bytes - register ID for rows to copy (height) -> word_1D100
	
	2 bytes - register ID -> byte_1D110
	2 bytes - register ID for destination column (X/8) -> word_1D10A
	2 bytes - register ID for destination row (Y) -> word_1D10C
	-> 0Ah + 06h = 10h bytes total
	Note: Same as 2F, except that parameters are read from registers.
3C TXCLR2 - text buffer clear 2
	2 bytes - destination column (X/8)
	2 bytes - destination row (Y)
	2 bytes - columns to fill (width/8)
	2 bytes - rows to fill (height)
	2 bytes - [HB-pad] copy mode (00 = mode "01 20", 01..FF = mode "01 87")
	-> 0Ah bytes total
3D MULR - multiply source with destination register
	2 bytes - destination register ID
	2 bytes - source register ID
	Note: This works with 2-byte (ID 000h..3FFh) and 4-byte (ID 400h+) registers. However, the source and destination MUST be from the same type.
3E DIVR - divide destination by source register
	2 bytes - destination register ID
	2 bytes - source register ID
	Note: This works with 2-byte (ID 000h..3FFh) and 4-byte (ID 400h+) registers. However, the source and destination MUST be from the same type.
3F CMD3F - ?? (screen resolution related?)
	2 bytes - register ID -> word_1D202
	2 bytes - register ID -> word_1D204
40 MENUSEL - run menu selection
	2 bytes - register ID, receives selected menu entry
	2 bytes - register ID, receives user action
	2 bytes - file offset of menu data
	2 bytes - destination file offset to continue execution at
41 CMD41 - ??
	2 bytes - register ID -> address to word_1D1E9
	2 bytes - register ID -> address to word_1D1EB
	2 bytes - register ID, receives user action
	2 bytes - destination file offset to continue execution at
42 CMD42 - ??
	2 bytes - [HB-pad] ?? -> byte_1D1F4
43 CMD43 - ?? (screen resolution related?)
	2 bytes - register ID <- word_1D202
	2 bytes - register ID <- word_1D204
44 - [v1.xx] dummy (does nothing)
44 - [v3.10] undefined
45 CMD45 - [v1.xx] some GFX effect
	2 bytes - ??
45 - [v3.10] undefined
46 - [v1.xx] same as command 56
46 - [v3.10] undefined
47 - [v1.xx] same as command 56
47 - [v3.10] undefined
48 - [v1.xx] same as command 56
48 - [v3.10] undefined
49 - [v1.xx] same as command 56
49 - [v3.10] undefined
4A REGFSAV - save register buffer to file
	2 bytes - [HB-pad] buffer (00 = buffer 1, 1000 bytes, 01..FF = buffer 2, 1048 bytes)
	2 bytes - file offset of file name
4B REGFLD - load register buffer from file
	2 bytes - [HB-pad] buffer (00 = buffer 1, 1000 bytes, 01..FF = buffer 2, 1048 bytes)
	2 bytes - file offset of file name
4C CMD4C - ?? (screen resolution related?)
	2 bytes - ?? -> written to word_1D202
	2 bytes - ?? -> written to word_1D204
4D BGMMEAS - get current music measure
	2 bytes - register ID that will receive the value
4E SFXSSG - play SSG sound effect
	2 bytes - [HB-pad] SSG sound effect number
4F SFXFM - play FM sound effect
	2 bytes - [HB-pad] FM sound effect number
50 BGMSTAT - get BGM status
	2 bytes - register ID that will receive the value
51 ANDI - "AND" value with destination register
	2 bytes - destination register ID
	2 bytes - value
	Note: assumes 2-byte addressing mode.
52 ORI - "OR" value with destination register
	2 bytes - destination register ID
	2 bytes - value
	Note: assumes 2-byte addressing mode.
53 STRCAT - concatenate source to the destination string
	2 bytes - destination string ID
	2 bytes - source string ID
	Appends the source string (from register) to the destination register. The terminator byte is included.
54 CALL - subroutine call
	2 bytes - file offset of the subroutine to execute
	The file offset of the next command is pushed to an internal stack for use with the return command.
	The stack allows for 8 levels of nesting.
55 RET - subroutine return
	The return address is popped from an internal stack.
56 STRCMPR - compare strings
	2 bytes - destination string ID
	2 bytes - source string ID
	Returns 3 (no match) or 0 (match).
57 STRNCPY - copy N bytes from source to destination string
	2 bytes - destination string ID
	2 bytes - source string ID
	2 bytes - number of characters to copy
	Note: A terminator-byte (00) is appended.
58 STRCPYC - append character N from source to the destination string
	2 bytes - destination string ID
	2 bytes - source string ID
	2 bytes - index of character to be copied
	Note: A terminator-byte (00) is appended.
59 STRCPYI - concatenate scenario string to the destination string
	2 bytes - destination string ID
	2 bytes - file offset of source string data
	Appends a string from the scene file to the destination register, including the terminator byte.
5A STRCLR - clear string
	2 bytes - destination string ID
	Clears the string by setting the register's buffer (80 bytes) to all 00s.
5B STRCPY - copy string
	2 bytes - destination string ID
	2 bytes - source string ID
	Copies a string from source to destination register, including the terminator byte.
5C - undefined
5D - undefined
5E CMD5E - clear GVRAM rectangle
	2 bytes - [HB-pad] GDC plane
	2 bytes - destination column (X/8)
	2 bytes - destination row (Y)
	2 bytes - columns to fill (width/8)
	2 bytes - rows to fill (height)
	-> 0Ah bytes total
	Clears some lines in GVRAM Plane 0 (offset 0A8000) by writing 00s to it.
5F STRTIME - set string to current date/time
	2 bytes - destination string ID
	Gets the current date/time via DOS calls 2Ah/2Ch and prints it as "YYYY-MM-DD HH:MM:SS" into the destination string.
60 FILETM - get file date/time
	2 bytes - register ID, will get return code (0 = success, 1 = failure)
	2 bytes - destination string ID
	2 bytes - file offset of file name
	Gets the date/time of a file and prints it to the destination string. (format as in command 5F)
	The register is set to 0/1 to indicate failure/success.
61 XYFSAVE - save XY buffer to file
	2 bytes - file offset of file name
62 CMD62 - ?? (writes to I/O port 0A2h and 0A0h)
	2 bytes - register ID
	2 bytes - register ID
	write to scroll register? (TODO)
	Executes GDC command 70h with 8 parameter bytes.
63 BLIT2I - image copy?
	2 bytes - [HB-pad] source GDC plane -> byte_1D0F6
	2 bytes - source column (X/8) -> word_1D0F8
	2 bytes - source row (Y) -> word_1D0FA
	2 bytes - columns to copy (width/8) -> word_1D0FE
	2 bytes - rows to copy (height) -> word_1D100
	
	2 bytes - [HB-pad] destination GDC plane -> byte_1D110
	2 bytes - destination column (X/8) -> word_1D10A
	2 bytes - destination row (Y) -> word_1D10C
	-> 0Ah + 06h = 10h bytes total
	Note: Same as 2F, but executes different GFX code
64 BLIT2R - image copy?
	2 bytes - register ID -> byte_1D0F6
	2 bytes - register ID for source column (X/8) -> word_1D0F8
	2 bytes - register ID for source row (Y) -> word_1D0FA
	2 bytes - register ID for columns to copy (width/8) -> word_1D0FE
	2 bytes - register ID for rows to copy (height) -> word_1D100
	
	2 bytes - register ID -> byte_1D110
	2 bytes - register ID for destination column (X/8) -> word_1D10A
	2 bytes - register ID for destination row (Y) -> word_1D10C
	-> 0Ah + 06h = 10h bytes total
	Note: Same as 63, except that parameters are read from registers.
65 - undefined
66 - undefined
67 GFX67 - ?? (GFX related)
	2 bytes - [HB-pad] ??
	2 bytes - [HB-pad] ??
	2 bytes - [HB-pad] ??
	2 bytes - [HB-pad] ??
	-> 08h bytes total
68 GFX68 - ?? (GFX related)
	2 bytes - register ID
	2 bytes - register ID
69 - [v1.xx] undefined
69 GFX69 - [v3.10] ?? (GFX related)
	2 bytes - register ID reg1, content description:
		Bits 0..2 (0007): bit mask index (0 = 80h, 1 = 40h, ..., 7 = 01h)
		Bits 3..15 (FFF8): value
	2 bytes - register ID, reg2
	2 bytes - destination register ID
6A CMD6A - ??
	2 bytes - value -> word_1D206
	2 bytes - value -> word_1D208
	2 bytes - value -> word_1D20A
	2 bytes - value -> word_1D20C
6B CMD6B - ??
	2 bytes - register ID -> word_1D206
	2 bytes - register ID -> word_1D208
	2 bytes - register ID -> word_1D20A
	2 bytes - register ID -> word_1D20C
6C - undefined
6D - undefined
6E STRLEN - get string length
	2 bytes - destination register ID
	2 bytes - source string ID
	Puts the length of the source string (without terminator character) into the destination register.
6F - [v1.xx] convert long to 2 short registers
	2 bytes - destination register ID [short]
	2 bytes - source register ID [long]
	Reads src, then puts the high word into src+0 and the low word into src+1. (effectively swapping the words)
6F - [v3.10] undefined
70 - [v1.xx] read 2 short registers and save into 1 long-word register
	2 bytes - destination register ID [long]
	2 bytes - source register ID [short]
	Reads src+0 and src+1 and writes it into dst with src+0 = high word, src+1 = low word.
70 - [v3.10] undefined
71 - [v1.xx] compare two long registers
	2 bytes - register ID of reg1 [long]
	2 bytes - register ID of reg2 [long]
	Same as command 0C, except that two long registers are compared with their full 4-byte longwords.
	Additionally, the result is saved in register 0. (unlike command 0C)
71 - [v3.10] undefined
72 FRMSTI - set script frame counter
	2 bytes - value for script frame counter
73 FRMGTR - get script frame counter
	2 bytes - register ID
	The script frame counter is put into the specified register.
74 FRMJPI - conditional jump based on script frame counter
	2 bytes - value
	2 bytes - destination file offset to continue execution at
	The conditional jump is taken when (frame counter < value).
75 FONTCHR - load custom font character
	2 bytes - JIS character code
		port 0A1h = [1st byte]
		port 0A3h = [2nd byte]-20h
	2 bytes - file offset of character data (data is 20h bytes long)
76 IDLECHR - set "idle animation" character IDs
	10h bytes - 8 words (2 bytes each)
	The game cycles through up to 8 characters (and then loops back) when asking the user to press a key to continue.
77 IDLEDLY - set "idle animation" delay times
	10h bytes - 8 words (2 bytes each)
	This specifies the number of frames each character set by command 76 is shown.
	A delay value of 0 marks an early animation end and will cause the game to loop back to frame 0.
78 IDLEXY - set "idle animation" X/Y position
	2 bytes - X position
	2 bytes - Y position
79 - [v1.00] undefined
79 CMD79 - [v1.10+] ?? (copies data to some buffer at the end of the script data)
	2 bytes - file offset of data
		Data format:
			[loop start]
				2 bytes - bit mask
				[for each bit set] 6 bytes - some data
				2 bytes - ??
			[loop end]
			2 bytes - bit mask with value 0000h
7A - [v1.00] undefined
7A FRMSTR - [v1.10+] set script frame counter from register
	2 bytes - register ID
7B - [v1.00] undefined
7B FRMJPR - [v1.10+] conditional jump based on script frame counter
	2 bytes - register ID
	2 bytes - destination file offset to continue execution at
	The conditional jump is taken when (frame counter < register contents).
7C - undefined
7D - undefined
7E - undefined
7F DOSRETR - exit to DOS, return code based on register content
	2 bytes - register ID, contains the return code
80 STRFLD - load strings from file
	2 bytes - string ID
	2 bytes - file offset of file name
	Opens the file and reads two (!) lines (separated by 0Dh 0Ah (CRLF)) into [string ID+0] and [string ID+1].
81 STRFSAV - write strings to file
	2 bytes - string ID
	2 bytes - file offset of file name
	Opens the file and writes the two (!) strings [string ID+0] and [string ID+1] as two lines, separated by 0Dh 0Ah (CRLF). Also adds an 1Ah (EOF) character.
82 GFX82 - ?? (writes to GVRAM Plane 0/1/2/3)
	no parameters
83 GFX83 - ?? (GFX related)
	2 bytes - register ID
84 GFX84 - ?? (some GFX transition effect)
	no parameters
85 GFX85 - ?? (some GFX transition effect)
	no parameters
86 PTDATA - set all Portrait Data
	2 bytes - file offset of portrait data (coordinates / palette)
	The data is 30h portrait * 12h bytes/portrait = 360h bytes long. All data values are 2-byte words.
	The 12h data per items equals the same as the parameters to command 87 after the index.
87 PTDAT1 - set single Portrait Data
	2 bytes - Portrait index (00..3F)
	2 bytes - [HB-pad] source GDC plane (0..2) (for I/O port 0A6h when reading the image)
	2 bytes - portrait start column (X/8) in portrait collection image
	2 bytes - portrait start row (Y) in portrait collection image
	2 bytes - [HB-pad] palette 0D: red
	2 bytes - [HB-pad] palette 0D: green
	2 bytes - [HB-pad] palette 0D: blue
	2 bytes - [HB-pad] palette 0E: red
	2 bytes - [HB-pad] palette 0E: green
	2 bytes - [HB-pad] palette 0E: blue
	-> 14h bytes total
	This defines the properties of one portrait image.
88 PTDSTI - set Portrait destination
	2 bytes - [HB-pad] destination GDC plane (0..2)
	2 bytes - destination start column (X/8)
	2 bytes - destination start row (Y)
	This sets the destination plane and coordinates for when portraits are drawn.
89 PTPOSA - [v1.10+] set all Portrait start positions
	2 bytes - file offset of portrait data
	The data is 30h items * 06h bytes/item = 120h bytes long. All data values are 2-byte words.
	The data contains the same information as the data in for command 86. However this command stores it in the same way as the engine's internal storage.
	Data format per line:
		2 bytes - [HB-pad] source GDC plane (0..2)
		2 bytes - portrait start column (X/8) in portrait collection image
		2 bytes - portrait start row (Y) in portrait collection image
8A PTPOS1R - [v1.10+] set Portrait start position
	2 bytes - register ID: portrait index
	2 bytes - register ID: source GDC plane (0..2)
	2 bytes - register ID: start column (X/8)
	2 bytes - register ID: start row (Y)
8B PTDSTR - [v1.10+] set Portrait destination
	2 bytes - register ID: destination GDC plane (0..2)
	2 bytes - register ID: start column (X/8)
	2 bytes - register ID: start row (Y)
	Note: Same as 88, except that parameters are read from registers.
8C GFX8C - [v1.10+] ?? (GFX related)
	no parameters
8D GFX8D - [v3.10] ?? (GFX related)
	no parameters
8E GFX8E - [v3.10] ?? (GFX related)
	no parameters

"Undefined" commands will print the message "Executed undefined system reserved instruction" and then exit to DOS with return code 1.
[HB-pad] - The high byte of the 2-byte word is used for padding only and is ignored by the engine.
[short] - 2-byte register (ID 000h..3FFh)
[long] - 4-byte register (ID 400h..40Ah)

System-98 v1.00 supports commands 00..88.
System-98 v1.10 supports commands 00..8C.
System-98 v3.10 supports commands 00..8E.

File names
----------
- The first byte of a file name seems to be the disk drive or data archive ID and is usually ignored by the game engine. Aside from that, file names are usual null-terminated strings.

Text box strings
----------------
- Strings use Shift-JIS encoding. They may include non-standard NEC-specific JIS characters, as well as custom ones from GAO4.FNT.
- [v1.xx] All Shift-JIS characters are assumed to be full-width. (16 pixels wide) Half-width characters are supported using byte codes 20h..7Fh (ASCII) and A0h..DFh (half-width Katakana).
- [v3.10] Shift-JIS characters 8541 .. 869E are assumed to be half-width. (8 pixels wide) All others are assumed to be full-width characters. (16 pixels wide)
- Special characters:
  - 00h - end string
  - 01h - wait for key press (shows idle animation), then clear text box
  - 02h - wait for key press (shows idle animation), then continue in the current text box
  - 03h cc - set text colour to cc
  - 04h ii - print register string ii (00/01 = character names)
  - 05h aa bb - print integer register bbaa (printed as decimal numbers, full-width Shift-JIS 854F..8558)
  - 06h - [v1.00] ignored
  - 06h pp - [v1.10+] overlay portrait (pp can be 00..3F), draws transparent portrait on top of the existing one)
  - 07h - [v1.00] ignored
  - 07h - [v1.10+] clear portrait
  - 08h - [v1.00] ignored
  - 08h xx - [v1.10+] ?? (sets byte_1E5C6)
  - 09h - tab (print 8 spaces)
  - 0Ah - [v1.xx] scroll text by 1 line
  - 0Ah - [v3.10] no effect
  - 0Bh pp - show portrait (pp can be 00..3F), also loads palettes 0Dh and 0Eh from portrait memory
  - 0Ch - [v1.00] ignored
  - 0Ch pp - [v1.10+] show portrait (pp can be 00..3F), but does NOT load any palettes
  - 0Dh - next line
  - 0Eh - [v1.00] ignored
  - 0Eh xx - [v1.10] ?? (related to TextRAM flags)
  - 0Eh xx - [v3.10] no effect (parameter is ignored)
  - 0Fh - [v1.xx] ignored
  - 0Fh cc - [v3.10] special code
  - 0Fh 00h xx - [v3.10] sets some flag (value can be 00 or 01)

Menu Data
---------
The menu data array consists of a series of tuples with 5 items:
- index (value 1+)
- selection box: X start
- selection box: Y start
- selection box: X end
- selection box: Y end

X and Y coordinates are given in pixels.
A index of 0 ends the list.
