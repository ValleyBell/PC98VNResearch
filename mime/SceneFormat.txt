MIME Scene Format
-----------------
[loop]
1 byte  - command ID
	00h..63h are valid
	64h..0FFh will crash the engine
? bytes - parameters
[loop end]

Commands
--------
00 TALKDGN - print dungeon talk
	? bytes - Shift-JIS string, terminated with two backslashes (5C5Ch)
	Special handling:
	- "##" (hex code 2323h) will be replaced with the player name
	- The closing bracket (Shift-JIS code 817Ah) enforces a new line after being printed.
	This is used to show player/NPC talk during dungeon crawling.
	It writes to the text box in the lower middle of the screen.
	Automatic line breaks happen after 16 full-width characters.
01 BGMLOAD - load music
	? bytes - null-terminated file name
	The file should have a ".M" file extension.
	In MIDI mode, the ".M" is replaced with ".N" to generate the file name of the MIDI song.
	This only loads music data into the sound driver. It does not start playback.
02 TALKFS - print full-screen talk
	? bytes - Shift-JIS string, see command 00 for details
	Special handling:
	- "##" (hex code 2323h) will be replaced with the player name
	- The closing bracket (Shift-JIS code 817Ah) enforces a tab (sets X position to full-width character 7) and indents all following lines accordingly.
	This is used to show player/NPC talk during full-screen cutscenes.
	It writes to the text box in the lower part of the screen.
	Automatic line breaks happen after 37 full-width characters.
03 SCNLOAD - load next scenario
	This command is usually placed after command 1C and will terminate the script execution.
	The game returns to the main loop, which will load a new script file from the file name set by command 1C and execute it.
04 TXTCOL - set text colour
	2 bytes - main colour (palette index 00h..0Fh)
	2 bytes - shadow colour (palette index 00h..0Fh)
05 PORTA6 - set GDC plane for reading/writing
	2 bytes - value to write to I/O register 0A6h (high byte is ignored)
	This selects which plane graphics are read from/written to.
06 WAIT - delay script execution by N frames
	2 bytes - number of frames to wait
07 MOVI - set register = value
	2 bytes - destination register ID (0..4675)
	2 bytes - value
08 MOVR - set register = other register
	2 bytes - source register ID
	2 bytes - destination register ID
09 ADDI - add value to register
	2 bytes - source/destination register ID
	2 bytes - value to be added
0A ADDR - add source to destination register
	2 bytes - register ID of value to be added
	2 bytes - source/destination register ID
0B SUBI - subtract value from register
	2 bytes - source/destination register ID
	2 bytes - value to be subtracted
0C SUBR - subtract source from destination register
	2 bytes - register ID of value to be subtracted
	2 bytes - source/destination register ID
0D BLIT1 - graphics copy 1 (opqaue)
	2 bytes - screen source address
	2 bytes - width in pixels
	2 bytes - height in pixels
	2 bytes - screen destination address
	2 bytes - mode
		Bit 0 (01h): ??
		Bit 1 (02h): ??
	-> 0Ah bytes
0E BLIT2 - graphics copy 2 (background to screen)
	2 bytes - screen source address
	2 bytes - width in pixels
	2 bytes - height in pixels
	2 bytes - screen destination address
	-> 08h bytes
	Same as command 0D, except that the "mode" is fixed to 02 and it waits 1 frame before executing it.
0F CMD0F - ??
	2 bytes - ??
10 BCLR - clear bit from register
	2 bytes - register ID
	2 bytes - bit to be cleared
	"Bit 0" -> (reg AND 0FFFEh), "Bit 15" -> (reg AND 7FFFh)
11 BSET - set bit in register
	2 bytes - register ID
	2 bytes - bit to be set
	"Bit 0" -> (reg AND 0001h), "Bit 15" -> (reg AND 8000h)
12 MOVM - set multiple registers to value
	2 bytes - register ID 1
	2 bytes - register ID 2
	2 bytes - value
	Sets all registers from reg1 to reg2 (inclusive) to the value.
13 CALL - subroutine call
	2 bytes - file offset of the subroutine to execute
	The file offset of the next command is pushed to an internal stack for use with the return command.
	The stack allows for 8 levels of nesting.
14 RET - subroutine return
	The return address is popped from an internal stack.
15 JP - jump to offset
	2 bytes - destination file offset to continue execution at
16 JEQ - conditional jump: equal
	2 bytes - register ID
	2 bytes - value
	2 bytes - destination file offset to continue execution at
	Jumps when: [register] == value
17 JGT - conditional jump: greater than
	2 bytes - register ID
	2 bytes - value
	2 bytes - destination file offset to continue execution at
	Jumps when: [register] > value (unsigned comparison)
18 JLT - conditional jump: less than
	2 bytes - register ID
	2 bytes - value
	2 bytes - destination file offset to continue execution at
	Jumps when: [register] < value (unsigned comparison)
19 IMGLD2 - same as 1A
	-> 9 bytes
	Note: The scripts all use command 1A, so this is command probably got its code removed and thus is invalid.
1A IMGLD - load GTA graphics file
	2 bytes - ??
		Bits 0-1   (0003h): ?? (ignored when bit 4 is clear)
		Bit   4    (0010h): ??
		Bit   8    (0100h): ??
		Bit 10-15 (0F400h): ??
	2 bytes - screen destination address
	5 bytes - file title of the .GTA file (no terminator byte)
	-> 9 bytes
1B IMGFX - graphics effect
	2 bytes - screen source address
	2 bytes - width in pixels
	2 bytes - height in pixels
	2 bytes - screen destination address
	2 bytes - mode (bit mask, can be 00..03) [same as mode in command 0D]
	-> 0Ah bytes
	TODO: What is the actual effect? It does a partial copy once every 3 frames for multiple iterations.
1C SCNSET - set next script
	? bytes - null-terminated file name of a script file
	The script will NOT be loaded by the command.
	Instead, it is usually followed by command 03, which ends script execution.
	After that, the game will load the script from the file set by this command and execute it.
1D MENUSEL - show menu
	2 bytes - draw address
	2 bytes - number of text strings (N)
	? bytes - series of N Shift-JIS strings, each is terminated with two backslashes (5C5Ch)
	Input:
	- register 9 - selected text main colour
	- register 10 - selected text shadow colour
	- register 11 - graphics layer of border image?
	- register 51 - mode? (checked for 0, 1, 2 and 3)
		mode 1/3 will show the list of saved games
	- register 54 - enable selection sound effect
	Output:
	- register 8 - selected entry (1 = first entry)
	- register 53 - set to 0
	The number of the selected entry is stored in register 8. The first entry has number 1.
	The text is drawn using the colours stored in register 9 (main colour) and 10 (shadow colour).
1E QUIT - end script and quit
	This will terminate the script and quit the game then.
1F CMD1F - fade screen in (black -> colour)
	2 bytes - step size in percent per frame (1 = slowest, 100 = instant)
20 CMD20 - fade screen out (colour -> black)
	2 bytes - step size in percent per frame (1 = slowest, 100 = instant)
21 SAVREAD - read save game file
	? bytes - null-terminated file name
22 CMD22 - ??
	no parameters
23 PORTA4 - set GDC plane to display
	2 bytes - value to write to I/O register 0A4h (high byte is ignored)
	The game waits 1 frame and then writes to the port.
	This switches between showing GDC plane 0 and 1.
24 MAPREAD - read maze map
	2 bytes - register ID for map X position
	2 bytes - register ID for map Y position
	Register 15 contains the "floor ID".
	This calculates an index: [map X] + [map Y] * 0x10
	It then reads [register (500 + [floor ID] * 0x100 + index)] and writes the result to [register 7].
25 BTST - test bit in register and jump conditionally
	2 bytes - register ID
	2 bytes - bit to be tested
	The command takes the contents of the register, extracts the respective bit (see commands 10/11).
	If the result is 0, it skips 3 additional bytes.
	If the result is non-zero, just continues.
	NOTE: This must be followed by a command that takes 2 parameter bytes. (usually a "JP" command)
26 BLIT3 - graphics copy 3 (transparent)
	2 bytes - screen source address
	2 bytes - width in pixels
	2 bytes - height in pixels
	2 bytes - screen destination address
	2 bytes - mode (bit mask, can be 00..03) [same as mode in command 0D]
	-> 0Ah bytes
	This seems to allow for transparent copies. (colour 0 is transparent)
27 CMD27 - wait for user input
	no parameters
	This calls INT 68h, routine AH=5.
	The function returns as soon as either a key is pressed or the mouse gets moved.
	Input:
	- register 38 - mode? (checked for 0, 1)
		mode 1/3 will show the list of saved games
	- register 25 - ?? (mode 0 only)
	- register 26 - ?? (mode 0 only)
	Output:
	- register 22 - key bitmask
		Bit  0 (0001h) - cursor up / numpad 8 / joystick up
		Bit  1 (0002h) - cursor down / numpad 2 / joystick down
		Bit  2 (0004h) - cursor left / numpad 4 / joystick left
		Bit  3 (0008h) - cursor right / numpad 6 / joystick right
		Bit  4 (0010h) - return key / control key / joystick button 1
		Bit  5 (0020h) - space bar / numpad 0 / joystick button 2
		Bit  6 (0040h) - shift key (speeds up cursor movement)
		Bit  7 (0080h) - escape
		Bit  8 (0100h) - F1
		Bit  9 (0200h) - F2
		Bit 10 (0400h) - F3
		Bit 11 (0800h) - F4
	- register 23 - mouse X position
	- register 24 - mouse Y position
	- register 26 - ?? (mode 0 only)
28 CMD28 - show mouse cursor
	no parameters
	This calls INT 68h, routine AH=3.
29 CMD29 - hide mouse cursor
	no parameters
	This calls INT 68h, routine AH=4.
2A CMD2A - set mouse cursor image
	Input:
	- register 26 - cursor image ID (0..4)
	no parameters
	This calls INT 68h, routine AH=0Bh with parameter AL = [register 26]
2B BGMPLAY - play music
	no parameters
	This calls INT 60h or 61h, routine AH=0.
2C BGMFADE - fade music out
	2 bytes - fade speed
	This calls INT 60h or 61h, routine AH=2 with parameter AL = (fade speed).
	It then waits for the fade out to complete (checking song volume with routine AH=8).
	Finally, it enforces the music to stop. (routine AH=1)
2D CMD2D - ??
	2 bytes - register ID 1
	2 bytes - register ID 2
	This calls INT 68h, routine AH=6 with parameters BX = [register of 1st parameter], DX = [register of wnd parameter].
2E MAPWRT - write map data
	2 bytes - register ID for map X position
	2 bytes - register ID for map Y position
	Register 15 contains the "floor ID".
	This calculates an index: [map X] + [map Y] * 0x10
	It then reads [register 7] and copies the value to [register (500 + [floor ID] * 0x100 + index)].
	The function is used  for auto-mapping (i.e. set the "has visited this square" bit) and marking certain spots as "event location".
2F MAPDRAW - draw map to screen
	no parameters
	Notes:
	- uses registers 19/20 as work memory
	- reads registers 12/13/14 for drawing the player's position
	- only used by Z0003.DAT
30 PRINT2 - print text (full-width characters)
	2 bytes - draw address (0FFFFh - continue at current position)
	? bytes - Shift-JIS string, terminated with two backslashes (5C5Ch)
31 CMD31 - ?? (related to map drawing?)
	no parameters
	Note: reads from registers 17/18
32 CMD32 - ??
	no parameters
	Note: reads from registers 17/18
33 PNAMADD - player naming: add character
	no parameters
	The function adds a character to the player's name by:
	1. setting the register with index [contents of register 7] to a value from the "name letter table" (hardcoded into the EXE file)
	2. drawing the respective character to the screen
	It does *not* increase the value in register 7. That is something that the script itself must do.
	Input:
	- register 7 - position in character name (0..3)
	- register 17 - name letter table, column (X) (0..16)
	- register 18 - name letter table, row (Y) (0..15)
	Output:
	- register 0..3 - sets [register (reg_7)] to a value from the "name letter table"
34 PNAMDEL - player naming: remove character
	no parameters
	The function removes the last character of the player's name by:
	It does *not* decrease the value in register 7. That is something that the script itself must do.
	1. setting the register that contains the character to 0
	2. copying the background image over the drawn character
	Input:
	- register 7 - position in character name (0..3)
	Output:
	- register 0..3 - sets [register (reg_7)] to 0
35 CMD35 - ??
	2 bytes - ?? (some routine ID, can be 0 or 1, other values will crash the game)
	This seems to install some interrupt handler for INT 08h.
36 CMD36 - ??
	no parameters
	This reverts command 35.
37 CMD37 - ??
	no parameters
	This calls INT 68h, routine AH=9 and then waits for a key press.
38 SAVWRT - write save game file
	? bytes - null-terminated file name
	This writes all script memory (2488h bytes) to a file.
39 RNDI - get random number
	2 bytes - register ID
	2 bytes - range
	This calculates a random number using a pseudo-random number generator.
	The result is divided by (range) and the remainder is saved to the register.
	Thus, the result is effectively 0..(range-1).
3A PRINT1 - print text (half-width characters)
	2 bytes - draw address (0FFFFh - continue at current position)
	? bytes - Shift-JIS string, terminated with a single backslash (5Ch)
	Note: Bytes 00h..7Fh will draw ASCII (font ROM, page 09h), bytes 80h..0FFh will draw half-width Katakana (font ROM, page 0Ah)
3B DSPS - print/display string from registers
	2 bytes - draw address (0FFFFh - continue at current position)
	2 bytes - register ID
	The game will read text, starting with the memory location of the register data, until it reaches a register of either 0000h or 5C5Ch.
	All characters are assumed to be 2-byte Shift-JIS.
	This is used to print the protagonist's name in various places.
3C DSPI10 - print/display integer register value (half-width, 5 digits)
	2 bytes - draw address (0FFFFh - continue at current position)
	2 bytes - register ID
	The register's contents are read and the resulting number drawn on the screen, right-aligned, padded with spaces to 5 characters.
	It uses half-width characters to show the number.
3D CMD3D - ??
	2 bytes - ??
	8*0Ah bytes - ?? (8 groups of 5x 2-byte integers)
	8*0Ah bytes - ??
	-> 0A2h bytes
	It copies 0A2h bytes from the script to some global location.
3E CMD3E - ??
	2 bytes - value (high byte is ignored)
	This calls INT 68h, routine AH=0Fh with parameter AL = value
3F SFXFM - play FM sound effect
	2 bytes - ID of the sound effect (high byte is ignored)
	ID 0 is special and will stop all currently playing sound effects.
40 DSKWAIT - wait for disk
	0Ah bytes - file name of "DISK_ID" file
	2 bytes - requested disk ID (0 = disk "A", 1 = disk "B", etc.)
	-> 0Ch bytes
41 BLIT4 - graphics copy 4 (?)
	2 bytes - screen source address
	2 bytes - width in pixels
	2 bytes - height in pixels
	2 bytes - screen destination address
	2 bytes - mode (bit mask, can be 00..03) [same as mode in command 0D]
	-> 0Ah bytes
42 DSPI20 - print/display integer register value (full-width, 5 digits)
	2 bytes - draw address (0FFFFh - continue at current position)
	2 bytes - register ID
	This command is the full-width version of command 3C.
	The register's contents are read and the resulting number drawn on the screen, right-aligned, padded with spaces to 5 characters.
	It uses full-width characters to show the number.
43 MULCI - register percentage multiply
	2 bytes - register ID
	2 bytes - value
	[register] = [register] * value / 100
	The result it stored in register 55.
44 CMD44 - ??
	no parameters
45 DIGDSP - print/display register digits
	2 bytes - draw address
		Note: Unlike other print functions, there is NO "reuse old position" option here. The value must be valid in any case.
	2 bytes - register ID
	This command draws the digits stored in registers [reg_ID + 0], [reg_ID + 1], ..., [reg_ID + 5].
	Each of the 6 registers must contain a value in the range of 0..9.
	Leading zeroes are replaced with spaces.
	Full-width characters are used to show the digits.
46 DIGADDI - add value to register digits
	2 bytes - register ID
	2 bytes - value to be added
	The command adds the value to a 6-digit number, which is spread across multiple registers.
	Each of the register contains 1 of 6 digits (as values 0..9).
	Register [reg_ID + 0] contains the most significant digit.
	Register [reg_ID + 5] contains the least significant digit.
	On overflow, the number is clamped to 999999.
47 DIGSUBI - subtract value from register digits
	2 bytes - register ID
	2 bytes - value to be subtracted
	The command subtracts the value from a 6-digit number, which is spread across multiple registers.
	See command 46 for details.
	On underflow, register 55 is set to 0FFFFh and [reg_ID + 0] will end up negative.
48 DSKMODE - get "run from floppy disk" state
	no parameters
	This checks whether or not the game runs from floppy disks or hard disk and sets register 55 according to the result.
		0 - running from hard disk
		1 - running from floppy disks (and thus requires disk swapping)
49 DIGADDR - add register value to register digits
	2 bytes - destination register ID
	2 bytes - source register ID
	The command adds the value from [source register] to a 6-digit number, which is spread across multiple registers starting with [destination register].
	See command 46 for details.
4A DIGSUBR - subtract register value from register digits
	2 bytes - destination register ID
	2 bytes - source register ID
	The command subtracts the value from [source register] from a 6-digit number, which is spread across multiple registers starting with [destination register].
	See command 47 for details.
4B BGMWAIT - wait until reaching a specific music measure
	2 bytes - measure to reach in FM mode
	2 bytes - measure to reach in MIDI mode
4C CMD4C - ?? (screen transition related?)
	no parameters
4D CMD4D - ?? (screen transition related?)
	no parameters
4E CMPR - compare registers
	2 bytes - register ID of reg1
	2 bytes - register ID of reg2
	reg2 == reg1 -> result = 0
	reg2 > reg1 -> result = 1
	reg2 < reg1 -> result = -1
	The result is saved in register 55.
4F MULI - multiply register with value
	2 bytes - source/destination register ID
	2 bytes - value to multiply
	The register receives the low 16 bits of the result. Register 55 receives the high 16 bits.
50 MULR - multiply register with register
	2 bytes - register ID of value to multiply
	2 bytes - source/destination register ID
	The destination register receives the low 16 bits of the result. Register 55 receives the high 16 bits.
51 DIVI - divide register by value
	2 bytes - source/destination register ID
	2 bytes - value to divide with
	The register receives the quotient. Register 55 receives the remainder.
52 DIVR - divide register by register
	2 bytes - register ID of value to multiply
	2 bytes - source/destination register ID
	The destination register receives the quotient. Register 55 receives the remainder.
53 GETITM - get item data
	2 bytes - register ID for item ID
	This copies the data for the specified item (24h bytes/18 registers) to registers 4550..4567.
54 GETMNST - get monster data
	2 bytes - register ID for monster ID
	This copies the data for the specified monster (48h bytes/36 registers) to register 10103..10138.
55 BLIT1R - graphics copy 1 (opqaue)
	2 bytes - register ID for screen source address
	2 bytes - register ID for width in pixels
	2 bytes - register ID for height in pixels
	2 bytes - register ID for screen destination address
	2 bytes - register ID for mode
	-> 0Ah bytes
	Same as command 0D, except that all values are read from registers.
56 BLIT2R - graphics copy 2 (background to screen)
	2 bytes - register ID for screen source address
	2 bytes - register ID for width in pixels
	2 bytes - register ID for height in pixels
	2 bytes - register ID for screen destination address
	-> 8 bytes
	Same as command 0E, except that all values are read from registers.
57 IMGFXR - graphics effect
	2 bytes - register ID for screen source address
	2 bytes - register ID for width in pixels
	2 bytes - register ID for height in pixels
	2 bytes - register ID for screen destination address
	2 bytes - register ID for mode
	-> 0Ah bytes
	Same as command 1B, except that all values are read from registers.
58 BLIT3R - graphics copy 3 (transparent)
	2 bytes - register ID for screen source address
	2 bytes - register ID for width in pixels
	2 bytes - register ID for height in pixels
	2 bytes - register ID for screen destination address
	2 bytes - register ID for mode
	-> 0Ah bytes
	Same as command 26, except that all values are read from registers.
59 IMGLDR - load GTA graphics file
	2 bytes - register ID 1 - starting register for file name
	2 bytes - register ID 2
	2 bytes - register ID 3
	-> 6 bytes
	Same as command 19, except that all values are read from registers.
5A RNDR - get random number with range from register
	2 bytes - register ID of range value
	2 bytes - destination register ID
	Same as command 39, except that the range is read from a register.
5B DSKGET - get disk ID
	0Ah bytes - file name of "DISK_ID" file
	The game will keep trying to the disk ID file until it succeeds.
	The result is saved in register 55.
	disk A - value 0, disk B - value 1, etc.
5C CMD5C - ??
	2 bytes - register ID
5D PRINT2R - print text (full-width characters)
	2 bytes - register ID for draw address (register data 0FFFFh - continue at current position)
	? bytes - Shift-JIS string, terminated with two backslashes (5C5Ch)
	Same as command 30, except that the draw address is read from a register.
5E DSPSR - print/display string from registers
	2 bytes - register ID for draw address (register data 0FFFFh - continue at current position)
	2 bytes - register ID
	Same as command 3B, except that the draw address is read from a register.
5F CMD5F - ??
	2 bytes - ?? (-> 8086 register BX)
	2 bytes - ?? (-> 8086 register DX)
	2 bytes - ?? (-> 8086 register SI)
	2 bytes - ?? (-> 8086 register DI)
	-> 8 bytes
	This calls INT 68h, routine AH=8.
60 CMD60 - ??
	no parameters
61 DSPI1N - print/display integer register value (half-width, up to 5 digits)
	2 bytes - draw address (0FFFFh - continue at current position)
	2 bytes - register ID
	The register's contents are read and the resulting number drawn on the screen. There is no alignment or padding.
	It uses half-width characters to show the number.
62 DSPI2N - print/display integer register value (full-width, up to 5 digits)
	2 bytes - draw address (0FFFFh - continue at current position)
	2 bytes - register ID
	This command is the full-width version of command 61.
	The register's contents are read and the resulting number drawn on the screen. There is no alignment or padding.
	It uses full-width characters to show the number.
63 DSKPSET - set file path disk letter
	no parameters
	This command is used to patch the drive letter of a file name in a following command.
	In order to do that, the command starts a search for a colon (:) at the position after the command.
	When a colon is found, it sets the byte preceeding it to the "default disk letter" (from DOS call via INT 21h).
	The search ends early when a 00h byte is found.

Screen draw address
-------------------
Various graphics commands (including most text commands) have an "address" parameter (2 bytes) that specifies an address in screen space.
It can be converted to an X,Y position using the following formulae:
	X = (address % 80) * 8
	Y = (address / 80)
	address = (Y * 80) + (X / 8)
This makes all values from 0x0000 to 0x7CFF valid.

In case of text commands the "draw address" specifies coordinate of the upper left edge of the text to be drawn.

Text strings
------------
- The game has 2 types of text strings: Strings with 1 byte per character and strings with 2 bytes per character.
  Each of those string types is accessed using separate commands.
- 1-byte-character strings can contain ASCII.
  They end with a backspace character (code 5Ch).
  Bytes 00h..7Fh will show ASCII characters from font ROM page 09h. The "HP" and "MP" texts used in battle screens use these.
  Bytes 80h..0FFh will draw half-width Katakana from font ROM page 0Ah. The game uses this for some names.
- 2-byte-character strings use Shift-JIS encoding. All of them are assumed to be full-width. (16 pixels wide)
  They end with a double-backspace character (code 5C5Ch).
  Some of the character codes are remapped to the game's custom font. These are:
  Shift-JIS 8560..8579 (JIS 2941..295A) - These are usually mirrors of the uppercase ASCII letters.
	The game uses them for the characters of the ancient language.
  Shift-JIS 8740..8753 (JIS 2D21..2D34) - These are usually circled numbers 1..20.
	8740..874C - symbols for types of time (dungeon screen, 3rd status line)
	874D..874E - circled 14 and 15 (probably unused)
	874F - diagonal "BS"
	8750 - diagonal "END" (shop/inventory symbol)
	8751..8753 - boxed "\", "+" and "-" (page change symbols in shop/inventory)
  Shift-JIS 8785..8789 (JIS 2D65..2D69) - These are usually circled ideographs.
	8785 - heart
	8786 - sweat droplet
	8787 - sweat drops
	8788 - "RI" (first part of the "RING" currency)
	8789 - "NG" (second part of the "RING" currency)

General notes
-------------
- The operator order for register operations differs depending on the operand type.
  - For operations with "register and value", the order is: [destination register] [operand value]
  - For operations with "register and register", the order is: [operand register] [destination register]
- The conditional jump command 25 requires a 3-byte command following it, which is skipped if the condition is not met.
